# Nombre del flujo de trabajo de GitHub Actions
name: CI/CD VitalApp

# Define cuándo se ejecutará el flujo de trabajo
on:
  push:
    branches: [ main ]  # Se ejecuta cuando hay un push a la rama main
  pull_request:
    branches: [ main ]  # Se ejecuta cuando hay un pull request a la rama main

# Define los trabajos que se ejecutarán
jobs:
  # Trabajo de pruebas
  test:
    runs-on: ubuntu-latest  # Se ejecuta en la última versión de Ubuntu
    steps:
      # Paso 1: Obtener el código del repositorio
      - name: Checkout código
        uses: actions/checkout@v3

      # Paso 2: Configurar el entorno Python
      - name: Configurar Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'  # Usa Python 3.10

      # Paso 3: Instalar las dependencias necesarias
      - name: Instalar dependencias
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Paso 4: Ejecutar las pruebas
      - name: Ejecutar pruebas
        run: |
          export PYTHONPATH=$PYTHONPATH:$(pwd)  # Añade el directorio actual al PYTHONPATH
          pytest tests/  # Ejecuta las pruebas en el directorio tests/

  # Trabajo de Docker
  docker:
    needs: test  # Este trabajo se ejecuta solo si el trabajo 'test' es exitoso
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      # Si necesitas acceso a otros recursos, agrégalos aquí
    steps:
      # Paso 1: Obtener el código
      - name: Checkout código
        uses: actions/checkout@v3

      # Paso 2: Iniciar sesión en Docker Hub
      - name: Login en Docker Hub
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      # Paso 3: Construir la imagen Docker
      - name: Construir imagen Docker
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/devops_saludvital:latest .

      # Paso 4: Publicar la imagen en Docker Hub
      - name: Subir imagen a Docker Hub
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/devops_saludvital:latest

  # Trabajo de despliegue local
  deploy:
    needs: docker  # Este trabajo se ejecuta solo si el trabajo 'docker' es exitoso
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      # Paso 1: Obtener el código
      - name: Checkout código
        uses: actions/checkout@v3

      # Paso 1.5: Instalar Docker Compose
      - name: Instalar Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      # Paso 2: Desplegar la aplicación usando docker-compose
      - name: Desplegar aplicación
        run: |
          echo "Desplegando aplicación con docker-compose"
          docker-compose up -d

  # Trabajo de despliegue en AWS
  deploy-aws:
    needs: docker
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout código
        uses: actions/checkout@v3

      # Paso 1.5: Instalar Docker Compose
      - name: Instalar Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      - name: Configurar las credenciales de AWS
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Configurar clave privada SSH
        run: |
          mkdir -p ~/.ssh
          if [ -z "${{ secrets.SSH_PRIVATE_KEY }}" ]; then
            echo "Error: La clave privada SSH no está configurada en los secretos de GitHub." >&2
            exit 1
          fi
          printf "%s" "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ls -l ~/.ssh/id_rsa  # Verifica que el archivo se creó correctamente

      - name: Verificar formato de la clave privada
        run: |
          head -5 ~/.ssh/id_rsa
          file ~/.ssh/id_rsa

      - name: Configurar SSH para git clone
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan github.com >> ~/.ssh/known_hosts

      - name: Verificar clave SSH con GitHub
        run: ssh -i ~/.ssh/id_ed25519 -T git@github.com || true

      - name: Clonar repositorio por SSH
        run: |
          if [ ! -d 'DevOps_SaludVital' ]; then
            git clone git@github.com:AlzateAndicaSebastian/DevOps_SaludVital.git DevOps_SaludVital
            sleep 3
          fi
          cd DevOps_SaludVital
          git pull origin main
          sleep 2
          docker-compose down
          sleep 2
          docker-compose pull
          sleep 2
          docker-compose up -d
